






















































































#else



#endif



















































}
























































































































template<class GenericString = icu::UnicodeString>











  GenericString const& value() const;
  GenericString const& value(TokenSpan&) const;














inline void appendChar(UChar32 ch, String32* pStr) {




inline void appendChar(UChar32 ch, String16* pStr) {
  icu::UnicodeString icuStr(ch);


}

inline void appendChar(UChar32 ch, icu::UnicodeString* pStr) {
  pStr->append(ch);


template<class GenericString>






template <class GenericString>








template<class GenericString>
void Tokenizer<GenericString>::next() {





















template<class GenericString>
GenericString const& Tokenizer<GenericString>::value() const {



template<class GenericString>
GenericString const& Tokenizer<GenericString>::value(TokenSpan& tokSpan) const {








