

























































































































































    std::string fullname(std::string const& key) const {
      return (pathname.empty() ? "" : (pathname + ".")) + key;
    }

















































































































































































































































































































































































































                   std::string const& component = "configure") {
  StringConsumer warn = Util::logWarning(component);







  // configure::help(o, pRootVal, Util::logWarning(component));
  StringConsumer warn = Util::logWarning(component);








  StringConsumer warn = Util::logWarning(component);







  showHelp(out, &c, component, verbosity);






  showExample(out, &c, component, verbosity);









void showEffective(std::ostream& o, Val const* pRootVal, std::string const& component = "configure") {
  //  configure::show_effective(o, pRootVal, Util::logWarning(component));
  StringConsumer warn = Util::logWarning("effective." + component);






std::string getEffective(Val* pRootVal, std::string const& component = "configure") {

  showEffective(o, pRootVal, component);





ConfigNode effectiveYaml(Val* pRootVal, std::string const& component = "configure") {





ConfigNode exampleYaml(Val* pRootVal, std::string const& component = "configure") {







  std::string component;
  PrintEffective(Val const& val, char const* component) : val(val), component(component) {}
  PrintEffective(Val const& val, std::string const& component) : val(val), component(component) {}




  void print(std::ostream& out) const { Config::showEffective(out, &val, component); }



PrintEffective<Val> printEffective(Val const& val, char const* component) {
  return PrintEffective<Val>(val, component);








PrintEffective<Val> printEffective(Val const& val, std::string const& component) {
  return PrintEffective<Val>(val, component);































void applyYaml(ConfigNode const& yamlRoot, Val* pRootVal, char const* component = "configure",

  StringConsumer warn = Util::logWarning(component);










  configureYaml(configure::store_config(), yamlRoot, pRootVal, component);







    LOG_INFO_NAMESTR(kLogPrefix + component, "effective (YAML applied) configuration for "





void applyYaml(ConfigNode const& yamlRoot, Val* pRootVal, std::string const& component, bool init = true,

  applyYaml(yamlRoot, pRootVal, component.c_str(), init, validate, verbose);













































