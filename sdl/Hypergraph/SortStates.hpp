
























  enum SortOrder {






  };



























































































































































    if (i.isTerminal()) { // then s is the first lexical state


        if (!i.isTerminal()) return kNoState;









template <class A>









  }















    }



        pDestState->addState(*i, ph->labelPair(lexst));
      else

    }

  }



    else {


    }
  }
};
























































            x.addState(s, h.labelPair(s));




              x.addState(s, h.labelPair(s));








              x.stateFor(s);














    else {






/**




   *
   */








/**




   *
   */

StateId sortStates(IHypergraph<A> const&h, IMutableHypergraph<A> *out,
                   SortStatesOptions const& opt = SortStatesOptions())
















    MutableHypergraph<Arc> sorted((kStoreInArcs));



  }






