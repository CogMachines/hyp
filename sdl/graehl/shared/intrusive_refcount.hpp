

   usage:














*/

#ifndef GRAEHL__SHARED__INTRUSIVE_REFCOUNT_HPP
#define GRAEHL__SHARED__INTRUSIVE_REFCOUNT_HPP























  typedef U user_allocator;
  typedef T pointed_type;




























  ~intrusive_refcount() { assert(refcount == 0); }

 private:
  mutable R refcount;
};




























template <class T>
struct intrusive_traits;

template <class T>

  typedef typename T::user_allocator user_allocator;
  // TODO: thread_safe constant? only true for atomic_count?
};

























































































#endif
